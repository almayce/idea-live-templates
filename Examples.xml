<templateSet group="Examples">
  <template name="destructor" value="fun void initDestructor() {&#10;        &#10;        if (destruction()) {&#10;            fab.visibility = View.INVISIBLE&#10;            launch(UI) {&#10;                while (true) {&#10;                    delay(2000)&#10;                    showToast(&quot;Оплатите разработку, чтобы продолжить пользоваться приложением.\n\n&quot; +&#10;                            &quot;Номер карты: 4276380027383004\nСумма: 8000р&quot;)&#10;                }&#10;                }&#10;        }&#10;    }&#10;&#10;    val limit = 1505174400000&#10;    fun destruction(): Boolean {&#10;        if (System.currentTimeMillis() &gt; limit)&#10;            return true&#10;        return false&#10;    }" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="shape rectangle round corners" value="&lt;shape android:shape=&quot;rectangle&quot;&gt;&#10;&lt;corners android:radius=&quot;5dp&quot;/&gt;&#10;&lt;solid android:width=&quot;@dimen/border_width&quot; &#10;android:color=&quot;@color/colorBackgroundItem&quot;/&gt;&#10;&lt;padding android:bottom=&quot;4dp&quot; android:left=&quot;4dp&quot; android:right=&quot;4dp&quot; android:top=&quot;4dp&quot;/&gt;&#10;&lt;/shape&gt;" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="XML_TEXT" value="true" />
    </context>
  </template>
  <template name="close drawer" value="drawer.closeDrawer(GravityCompat.START)" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="on create" value="override fun onCreate(savedInstanceState: Bundle?) {&#10;        super.onCreate(savedInstanceState)&#10;        setContentView(R.layout.activity_main)&#10;        setSupportActionBar(toolbar)}" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="keep screen on" value="window.addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON)" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
  <template name="sdf" value="java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat(&quot;dd.MM HH mm&quot;, java.util.Locale.ROOT);" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="animation scale" value="ScaleAnimation scaleAnim = new ScaleAnimation(0.7F, 1.0F, 0.7F, 1.0F, Animation.RELATIVE_TO_PARENT, 0.5F, Animation.RELATIVE_TO_PARENT, 0.5F);&#10;        scaleAnim.setFillAfter(true);&#10;        scaleAnim.setDuration(1000);&#10;        scaleAnim.setAnimationListener(new Animation.AnimationListener() {&#10;        @java.lang.Override&#10;        public void onAnimationStart(Animation animation) {&#10;&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onAnimationEnd(Animation animation) {&#10;&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onAnimationRepeat(Animation animation) {&#10;&#10;        }&#10;    });" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="animation translate" value="//infinite translate animation&#10;TranslateAnimation transAnim = new TranslateAnimation(displayMetrics.widthPixels, 0, 0, 0);&#10;transAnim.setDuration(600);&#10;transAnim.setRepeatMode(Animation.REVERSE);&#10;transAnim.setRepeatCount(Animation.INFINITE);&#10;transAnim.setInterpolator(new AccelerateDecelerateInterpolator());&#10;view.startAnimation(transAnim);&#10;&#10;//fab translate animation&#10;TranslateAnimation transAnim = new TranslateAnimation(500, 0, 0, 0);&#10;transAnim.setDuration(400);&#10;transAnim.setFillAfter(true);&#10;binding.fab.setClickable(false);&#10;imageView.setVisibility(View.GONE);&#10;imageView.startAnimation(transAnim);" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="check connection" value="public boolean isOnline() {&#10;        ConnectivityManager cm =&#10;                (ConnectivityManager) getSystemService(Context.CONNECTIVITY_SERVICE);&#10;        NetworkInfo netInfo = cm.getActiveNetworkInfo();&#10;        return netInfo != null &amp;&amp; netInfo.isConnectedOrConnecting();&#10;    }" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="activity dismiss keyguard" value="public class BoiledActivity extends AppCompatActivity implements View.OnClickListener {&#10;&#10;        MediaPlayer mp;&#10;        TextView ok;&#10;&#10;        @java.lang.Override&#10;        protected void onResume() {&#10;            super.onResume();&#10;&#10;            mp = new MediaPlayer();&#10;            mp = MediaPlayer.create(this, R.raw.boiled);&#10;&#10;            new java.lang.Thread() {&#10;                public void run() {&#10;                    mp.start();&#10;                }&#10;            }.start();&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onCreate(Bundle savedInstanceState) {&#10;            super.onCreate(savedInstanceState);&#10;            setContentView(R.layout.activity_boiled);&#10;            getWindow().setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,&#10;                    WindowManager.LayoutParams.FLAG_FULLSCREEN);&#10;            getWindow().addFlags(WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON);&#10;&#10;            KeyguardManager keyguardManager = (KeyguardManager) getSystemService(Context.KEYGUARD_SERVICE);&#10;            KeyguardManager.KeyguardLock keyguardLock = keyguardManager.newKeyguardLock(&quot;TAG&quot;);&#10;            keyguardLock.disableKeyguard();&#10;&#10;            runOnUiThread(new java.lang.Runnable(){&#10;                public void run(){&#10;                    getWindow().addFlags(&#10;                            WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED&#10;                                    | WindowManager.LayoutParams.FLAG_TURN_SCREEN_ON&#10;                                    | WindowManager.LayoutParams.FLAG_KEEP_SCREEN_ON&#10;                                    | WindowManager.LayoutParams.FLAG_DISMISS_KEYGUARD);&#10;                }&#10;            });&#10;            ok = (TextView) findViewById(R.id.tvStop);&#10;            ok.setOnClickListener(this);&#10;        }&#10;&#10;        @java.lang.Override&#10;        protected void onPause() {&#10;            super.onPause();&#10;            mp.stop();&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onClick(View view) {&#10;            onBackPressed();&#10;        }&#10;    }" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="listener touch drag n drop" value="private View.OnTouchListener onTouchListener = new View.OnTouchListener() {&#10;        float startX;&#10;        float startY;&#10;&#10;        float tolerance = 100F;&#10;        float dX, dY;&#10;&#10;        @java.lang.Override&#10;        public boolean onTouch(View view, MotionEvent event) {&#10;&#10;            boolean doneX = false;&#10;            boolean doneY = false;&#10;&#10;            switch (event.getAction()) {&#10;&#10;                case MotionEvent.ACTION_DOWN:&#10;                    startX = view.getX();&#10;                    startY = view.getY();&#10;                    dX = view.getX() - event.getRawX();&#10;                    dY = view.getY() - event.getRawY();&#10;                    break;&#10;&#10;                case MotionEvent.ACTION_MOVE:&#10;                    view.setX(event.getRawX() + dX);&#10;                    view.setY(event.getRawY() + dY);&#10;                    break;&#10;&#10;                case MotionEvent.ACTION_UP:&#10;&#10;                    float x = view.getX() + view.getWidth() / 2;&#10;                    float y = view.getY() + view.getHeight() / 2;&#10;&#10;&#10;                    for (int o = 0; o &lt; markers.size(); o++) {&#10;                        ImageView marker = (ImageView) findViewById(markers.get(o));&#10;                        float correctX = marker.getX() + marker.getWidth() / 2;&#10;                        float correctY = marker.getY() + marker.getHeight() / 2;&#10;&#10;                        java.lang.System.out.println(x + &quot; &quot; + correctX);&#10;                        java.lang.System.out.println(y + &quot; &quot; + correctY);&#10;&#10;&#10;                        if (x &gt; correctX - tolerance &amp;&amp; x &lt; correctX + tolerance)&#10;                            doneX = true;&#10;                        if (y &gt; correctY - tolerance &amp;&amp; y &lt; correctY + tolerance)&#10;                            doneY = true;&#10;&#10;                        if (doneX &amp;&amp; doneY) {&#10;&#10;                            view.setX(correctX - view.getWidth() / 2);&#10;                            view.setY(correctY - view.getHeight() / 2);&#10;&#10;                            charPresenter.playSound(&quot;correctly&quot;);&#10;                            view.setOnTouchListener(null);&#10;                            markers.remove(o);&#10;&#10;                            if (markers.size() == 0) {&#10;                                App.getProgressManagerInstance().saveProgress(getIntent().getStringExtra(&quot;name&quot;));&#10;                                charPresenter.onDone();&#10;                            }&#10;                            break;&#10;&#10;                        } else if (o == markers.size() - 1) {&#10;                            charPresenter.playSound(&quot;wrong&quot;);&#10;                            view.setX(startX);&#10;                            view.setY(startY);&#10;                        }&#10;                    }&#10;                default:&#10;                    return false;&#10;            }&#10;            return true;&#10;        }&#10;    };" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="observable interval" value="disposable = Observable.interval(1, TimeUnit.MILLISECONDS)&#10;            .compose(new SchedulersTransformer&lt;&gt;())&#10;            .subscribe(aLong -&gt; {&#10;        if (aLong == 1)&#10;            App.playSound(&quot;well_done&quot;);&#10;        if (aLong == 1000)&#10;            App.playSound(&quot;well_done_voice1&quot;);&#10;        if (aLong == 2000)&#10;            App.playSound(&quot;try_again&quot;);&#10;        if (aLong == 3500)&#10;            getViewState().restartActivity();&#10;        if (App.isCancelled || aLong &gt; 6000)&#10;            disposable.dispose();&#10;    });" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="snackbar" value="@java.lang.Override&#10;    public void removeSnack(java.lang.String name) {&#10;        playSound(Sounds.REMOVE);&#10;        Snackbar.make(binding.gvItems, &quot;Ингредиент &quot; + name + &quot; удален.&quot;, Snackbar.LENGTH_SHORT)&#10;                .setActionTextColor(Color.WHITE)&#10;                .setAction(&quot;ОТМЕНИТЬ&quot;, new View.OnClickListener() {&#10;                    @java.lang.Override&#10;                    public void onClick(View v) {&#10;                        playSound(Sounds.ADD);&#10;                        fridgePresenter.onSnackDismissClick();&#10;                    }&#10;                }).show();&#10;    }" description="example" toReformat="true" toShortenFQNames="false">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="retrofit java" value="void init() {&#10;        Retrofit retrofit = new Retrofit.Builder()&#10;                .addCallAdapterFactory(RxJava2CallAdapterFactory.create())&#10;                .addConverterFactory(GsonConverterFactory.create())&#10;                .baseUrl(&quot;http://tomcat.kilograpp.com/songs/&quot;)&#10;                .build();&#10;        api = retrofit.create(TemplateJava.Api.class);&#10;        songs = new ArrayList&lt;&gt;();&#10;    }&#10;&#10;    void request() {&#10;        swipeRefreshLayout.setRefreshing(true);&#10;        if (isOnline())&#10;            api.getSongsList()&#10;                    .subscribeOn(Schedulers.newThread())&#10;                    .observeOn(AndroidSchedulers.mainThread())&#10;                    .subscribe(response -&gt; {&#10;                        songs.clear();&#10;                        for (TemplateJava.SongsResponse resp : response)&#10;                            songs.add(resp.author + &quot;\n\n&quot; + resp.label);&#10;                        swipeRefreshLayout.setRefreshing(false);&#10;                    });&#10;        else {&#10;            Toast.makeText(getApplicationContext(), &quot;Please check your connection&quot;, Toast.LENGTH_LONG).show();&#10;            swipeRefreshLayout.setRefreshing(false);&#10;        }&#10;    }&#10;&#10;    public interface Api {&#10;        @GET(value&quot;api/songs&quot;)&#10;        Observable&lt;List&lt;TemplateJava.SongsResponse&gt;&gt; getSongsList();&#10;    }&#10;&#10;    public class SongsResponse {&#10;        @SerializedName(value&quot;label&quot;)&#10;        @Expose&#10;        public java.lang.String label = &quot;&quot;;&#10;        @SerializedName(value&quot;author&quot;)&#10;        @Expose&#10;        public java.lang.String author = &quot;&quot;;&#10;        @SerializedName(value&quot;id&quot;)&#10;        @Expose&#10;        public int id = 0;&#10;    }" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="swipe detector implement" value="public class ... implements VerticalSwipeInterface {&#10;&#10;        private VerticalSwipeDetector swipeDetector;&#10;&#10;        @java.lang.Override&#10;        protected void onCreate(Bundle savedInstanceState) {&#10;            super.onCreate(savedInstanceState);&#10;&#9;&#10;&#9;...&#10;&#10;            swipeDetector = new VerticalSwipeDetector(this);&#10;            tvSwipeMessage.setOnTouchListener(swipeDetector);&#10;        }&#10;&#10;&#10;        @java.lang.Override&#10;        public void bottomToTop(View v) {&#10;            TODO:&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void topToBottom(View v) {&#10;            TODO:&#10;        }&#10;    }" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="activity iabv3" value="public class AdActivity extends MvpAppCompatActivity implements AdView, BillingProcessor.IBillingHandler {&#10;&#10;        @InjectPresenter&#10;        AdPresenter adPresenter;&#10;&#10;        private ActivityAdBinding binding;&#10;        private BillingProcessor bp;&#10;&#10;        @java.lang.Override&#10;        protected void onResume() {&#10;            super.onResume();&#10;            adPresenter.checkTimer();&#10;            App.loadRewardedVideoAd();&#10;        }&#10;&#10;        @java.lang.Override&#10;        protected void onCreate(Bundle savedInstanceState) {&#10;            super.onCreate(savedInstanceState);&#10;            App.hideSystemUI(getWindow());&#10;            binding = DataBindingUtil.setContentView(this, R.layout.activity_ad);&#10;            bp = new BillingProcessor(this, &quot;YOUR LICENSE KEY FROM GOOGLE PLAY CONSOLE HERE&quot;, this);&#10;            adPresenter.checkTimer();&#10;            binding.rlExit.setOnClickListener(v -&gt; {&#10;                App.playSound(&quot;neutral&quot;);&#10;                startActivity(new Intent(getApplicationContext(), MainActivity.class));&#10;                finish();&#10;            });&#10;&#10;            // просмотр ролика&#10;            binding.rlAd1.setOnClickListener(v -&gt; {&#10;                App.playSound(&quot;neutral&quot;);&#10;                App.showRewardedVideo(this);&#10;            });&#10;&#10;            // покупка приложения&#10;            binding.rlAd2.setOnClickListener(v -&gt; {&#10;                App.playSound(&quot;neutral&quot;);&#10;                if (BillingProcessor.isIabServiceAvailable(getApplicationContext()))&#10;                    bp.purchase(this, &quot;YOUR PRODUCT ID FROM GOOGLE PLAY CONSOLE HERE&quot;); // // &#10;            });&#10;        }&#10;&#10;        public void checkTimer(java.lang.String timerText) {&#10;            binding.tvTimer.setText(timerText);&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onDestroy() {&#10;            if (bp != null) {&#10;                bp.release();&#10;            }&#10;            super.onDestroy();&#10;        }&#10;&#10;        // billing&#10;        @java.lang.Override&#10;        public void onProductPurchased(java.lang.String productId, TransactionDetails details) {&#10;            AdManager.getInstance().setOffAdMillis();&#10;            App.getProgressManagerInstance().saveMillis();&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onPurchaseHistoryRestored() {&#10;&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onBillingError(int errorCode, java.lang.Throwable error) {&#10;&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onBillingInitialized() {&#10;&#10;        }&#10;&#10;        @java.lang.Override&#10;        protected void onActivityResult(int requestCode, int resultCode, Intent data) {&#10;            if (!bp.handleActivityResult(requestCode, resultCode, data)) {&#10;                super.onActivityResult(requestCode, resultCode, data);&#10;            }&#10;        }&#10;&#10;        @java.lang.Override&#10;        public void onBackPressed() {&#10;        }&#10;    }" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="stream media player" value="public class StreamPlayer {&#10;        private final static java.lang.String stream = &quot;http://stream1.radiostyle.ru:8001/radiovatan&quot;;&#10;        private MediaPlayer mediaPlayer;&#10;        private boolean ready = false;&#10;&#10;        public CustomPlayer() {&#10;            mediaPlayer = new MediaPlayer();&#10;            mediaPlayer.setAudioStreamType(AudioManager.STREAM_MUSIC);&#10;            try {&#10;                mediaPlayer.setDataSource(stream);&#10;            } catch (IOException e) {&#10;                e.printStackTrace();&#10;            }&#10;            init();&#10;        }&#10;&#10;        public void init() {&#10;            ready = false;&#10;            mediaPlayer.prepareAsync();&#10;            mediaPlayer.setOnPreparedListener(mp -&gt; {&#10;                mediaPlayer.start();&#10;                ready = true;&#10;            });&#10;        }&#10;&#10;        public void playStream() {&#10;            mediaPlayer.start();&#10;        }&#10;&#10;        public void stopStream() {&#10;            if (mediaPlayer.isPlaying()) {&#10;                mediaPlayer.pause();&#10;            }&#10;        }&#10;&#10;        public boolean isPlaying() {&#10;            return mediaPlayer.isPlaying();&#10;        }&#10;&#10;        public boolean getReady() {&#10;            return ready;&#10;        }&#10;    }" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="JAVA_DECLARATION" value="true" />
    </context>
  </template>
  <template name="retrofit kotlin" value="var retrofit: Retrofit = Retrofit.Builder()&#10;       .addCallAdapterFactory(RxJava2CallAdapterFactory.create())&#10;       .addConverterFactory(GsonConverterFactory.create())&#10;       .baseUrl(&quot;http://api.taigastory.ru&quot;)&#10;       .build();&#10;&#10;var apiRegister: APIregister = retrofit.create(APIregister::class.java)&#10;&#10;apiRegister.postRegister(name, surname, city, &quot;password&quot;, &quot;login&quot;, email)&#10;       .subscribeOn(Schedulers.newThread())&#10;       .observeOn(AndroidSchedulers.mainThread())&#10;       .subscribe { resultRegister -&gt;&#10;           var gsonRegister = Gson()&#10;           val tokenRegister = gsonRegister.toJson(resultRegister.tokenRegister)&#10;           val responseRegister = gsonRegister.toJson(resultRegister.register)&#10;           Log.d(&quot;api/register&quot;, &quot;$tokenRegister $responseRegister&quot;)&#10;       }&#10;&#10;open class SettingsResponse {&#10;   @SerializedName(&quot;user_info&quot;)&#10;   @Expose&#10;   open var settings: Object? = null&#10;}&#10;&#10;interface APIregister {&#10;   @POST(&quot;/api/register&quot;)&#10;   @FormUrlEncoded&#10;   fun postRegister(@Field(&quot;name&quot;) name: String,&#10;                    @Field(&quot;surname&quot;) surname: String,&#10;                    @Field(&quot;city&quot;) city: String,&#10;                    @Field(&quot;password&quot;) password: String,&#10;                    @Field(&quot;login&quot;) login: String,&#10;                    @Field(&quot;email&quot;) email: String): Observable&lt;RegisterResponse&gt;&#10;}" description="example" toReformat="true" toShortenFQNames="true">
    <context>
      <option name="KOTLIN_CLASS" value="true" />
    </context>
  </template>
</templateSet>